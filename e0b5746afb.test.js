// ********RoostGPT********
// Test generated by RoostGPT for test aman12Feb using AI Type Open AI and AI Model gpt-4



// ********RoostGPT********
import express from "express";
import request from "supertest";
import path from "path";
import mongoose from "mongoose";
import cookieParser from "cookie-parser";
import jwt from "jsonwebtoken";
import bcrypt from "bcrypt";
import User from './models/user';
import app from './index.js';

jest.mock('./models/user');

const mockUser = {
  _id: mongoose.Types.ObjectId('600d5a83af39853214ecb8cd'),
  name: 'test',
  email: 'test@example.com',
  password: 'password',
};

describe('POST /register', () => {
  beforeEach(() => {
    User.findOne.mockImplementationOnce(() => ({
      exec: jest.fn().mockResolvedValueOnce(null),
    }));
    User.create.mockResolvedValueOnce(mockUser);
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  test('should redirect to /login when user already exists', async () => {
    User.findOne.mockImplementationOnce(() => ({
      exec: jest.fn().mockResolvedValueOnce(mockUser),
    }));

    const res = await request(app)
      .post('/register')
      .send(mockUser);

    expect(res.statusCode).toBe(302);
    expect(res.headers.location).toBe('/login');
  });

  test('should register a new user and redirect to /', async () => {
    const res = await request(app)
      .post('/register')
      .send(mockUser);

    expect(res.statusCode).toBe(302);
    expect(res.headers.location).toBe('/');
    expect(res.headers['set-cookie']).toBeDefined();
    expect(User.create).toBeCalledWith({
      name: mockUser.name,
      email: mockUser.email,
      password: expect.any(String),
    });
  });
});
