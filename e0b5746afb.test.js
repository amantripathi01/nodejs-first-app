// ********RoostGPT********
// Test generated by RoostGPT for test aman12Feb using AI Type Open AI and AI Model gpt-4



// ********RoostGPT********
import express from "express";
import request from "supertest";
import path from "path";
import mongoose from "mongoose";
import cookieParser from "cookie-parser";
import jwt from "jsonwebtoken";
import bcrypt from "bcrypt";
import User from './models/user';
import app from './index.js';

jest.mock('./models/user');

const mockUser = {
  _id: mongoose.Types.ObjectId('mockObjectId'),
  name: 'Test user',
  email: 'test@test.com',
  password: 'testpassword'
};

describe('POST /register', () => {
  beforeEach(() => {
    User.findOne.mockImplementation(() => null);
    User.create.mockImplementation(() => mockUser);
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  test('should create a new user and return 200 status', async () => {
    const res = await request(app)
      .post('/register')
      .send({
        name: mockUser.name,
        email: mockUser.email,
        password: mockUser.password
      });

    expect(res.status).toBe(302);
    expect(res.headers.location).toBe('/');
    expect(User.findOne).toHaveBeenCalledWith({ email: mockUser.email });
    expect(User.create).toHaveBeenCalledWith({
      name: mockUser.name,
      email: mockUser.email,
      password: expect.any(String)
    });
  });

  test('should not create a new user if email already exists and return 302 status', async () => {
    User.findOne.mockImplementation(() => mockUser);

    const res = await request(app)
      .post('/register')
      .send({
        name: mockUser.name,
        email: mockUser.email,
        password: mockUser.password
      });

    expect(res.status).toBe(302);
    expect(res.headers.location).toBe('/login');
    expect(User.findOne).toHaveBeenCalledWith({ email: mockUser.email });
    expect(User.create).not.toHaveBeenCalled();
  });
});
