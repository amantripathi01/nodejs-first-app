// ********RoostGPT********
// Test generated by RoostGPT for test aman12Feb using AI Type Open AI and AI Model gpt-4



// ********RoostGPT********
import express from "express";
import path from "path";
import mongoose from "mongoose";
import cookieParser from "cookie-parser";
import jwt from "jsonwebtoken";
import bcrypt from "bcrypt";
import { isAuthenticated } from './index.js';

// Mock User model
const User = {
  findById: jest.fn()
};

// Mock jwt
jest.mock('jsonwebtoken', () => ({
  verify: jest.fn()
}));

// Mock express
const mockRequest = () => {
  const req = {};
  req.cookies = jest.fn().mockReturnValue(req);
  return req;
};

const mockResponse = () => {
  const res = {};
  res.redirect = jest.fn().mockReturnValue(res);
  return res;
};

describe('isAuthenticated', () => {
  let req;
  let res;
  let next;

  beforeEach(() => {
    req = mockRequest();
    res = mockResponse();
    next = jest.fn();
  });

  it('should call next if token is valid', async () => {
    jwt.verify.mockReturnValueOnce({_id: '123'});
    User.findById.mockResolvedValueOnce('user');
    req.cookies.token = 'valid-token';

    await isAuthenticated(req, res, next);

    expect(next).toHaveBeenCalled();
    expect(req.user).toEqual('user');
  });

  it('should redirect to login if token is invalid', async () => {
    req.cookies.token = 'invalid-token';

    await isAuthenticated(req, res, next);

    expect(res.redirect).toHaveBeenCalledWith('/login');
  });

  it('should redirect to login if token is not provided', async () => {
    await isAuthenticated(req, res, next);

    expect(res.redirect).toHaveBeenCalledWith('/login');
  });
});
