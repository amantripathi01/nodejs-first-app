// Test generated by RoostGPT for test ExpressJs using AI Type Open AI and AI Model gpt-4

import express from "express";
import path from "path";
import mongoose from "mongoose";
import cookieParser from "cookie-parser";
import jwt from "jsonwebtoken";
import bcrypt from "bcrypt";
import { isAuthenticated } from './index';
import User from './User';

jest.mock('./User');

const mockRequest = (sessionData, body) => ({
  session: { data: sessionData },
  body,
});

const mockResponse = () => {
  const res = {};
  res.status = jest.fn().mockReturnValue(res);
  res.json = jest.fn().mockReturnValue(res);
  return res;
};

describe('isAuthenticated', () => {
  let req;
  let res;
  let next;

  beforeEach(() => {
    req = mockRequest(
      {},
      { token: jwt.sign({ _id: '123' }, 'sdjasdbajsdbjasd') }
    );
    res = mockResponse();
    next = jest.fn();
    User.findById.mockResolvedValue({ _id: '123', name: 'John Doe' });
  });

  it('should call next if token is valid', async () => {
    await isAuthenticated(req, res, next);
    expect(next).toHaveBeenCalled();
  });

  it('should redirect to login if token is not in cookies', async () => {
    req = mockRequest({}, {});
    res.redirect = jest.fn();
    await isAuthenticated(req, res, next);
    expect(res.redirect).toHaveBeenCalledWith('/login');
  });

  it('should throw error if token is invalid', async () => {
    req = mockRequest(
      {},
      { token: jwt.sign({ _id: '123' }, 'wrong-secret') }
    );
    res.redirect = jest.fn();
    await expect(isAuthenticated(req, res, next)).rejects.toThrow();
  });
});
