// Test generated by RoostGPT for test ExpressJs using AI Type Open AI and AI Model gpt-4

import express from "express";
import path from "path";
import mongoose from "mongoose";
import cookieParser from "cookie-parser";
import jwt from "jsonwebtoken";
import bcrypt from "bcrypt";
import { isAuthenticated } from './index.js';

jest.mock('jsonwebtoken');
jest.mock('mongoose');

describe('isAuthenticated middleware', () => {
  let req, res, next;

  beforeEach(() => {
    req = {
      cookies: {},
      user: null
    };
    res = {
      redirect: jest.fn()
    };
    next = jest.fn();
  });

  test('should proceed to next middleware when token is valid', async () => {
    const mockUser = { _id: 'userId' };
    jwt.verify.mockReturnValueOnce(mockUser);
    mongoose.findById.mockResolvedValueOnce(mockUser);
    req.cookies.token = 'validToken';

    await isAuthenticated(req, res, next);

    expect(jwt.verify).toHaveBeenCalledWith('validToken', 'sdjasdbajsdbjasd');
    expect(mongoose.findById).toHaveBeenCalledWith(mockUser._id);
    expect(req.user).toEqual(mockUser);
    expect(next).toHaveBeenCalled();
    expect(res.redirect).not.toHaveBeenCalled();
  });

  test('should redirect to login when token is not provided', async () => {
    await isAuthenticated(req, res, next);

    expect(res.redirect).toHaveBeenCalledWith('/login');
    expect(next).not.toHaveBeenCalled();
  });
});
