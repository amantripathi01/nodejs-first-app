// ********RoostGPT********
// Test generated by RoostGPT for test aman12Feb using AI Type Open AI and AI Model gpt-4



// ********RoostGPT********
import express from "express";
import path from "path";
import mongoose from "mongoose";
import cookieParser from "cookie-parser";
import jwt from "jsonwebtoken";
import bcrypt from "bcrypt";
import { isAuthenticated } from './index.js';

// Mocking the express request and response objects
const mockRequest = (sessionData, body) => ({
  session: { data: sessionData },
  body,
});

const mockResponse = () => {
  const res = {};
  res.status = jest.fn().mockReturnValue(res);
  res.json = jest.fn().mockReturnValue(res);
  res.redirect = jest.fn().mockReturnValue(res);
  return res;
};

// Mocking the User Model
const User = {
  findById: jest.fn().mockImplementation((id) => {
    return { id };
  }),
};

describe("isAuthenticated", () => {
  beforeAll(() => {
    process.env.JWT_SECRET = "sdjasdbajsdbjasd";
  });

  test("should redirect to login if no token is provided", async () => {
    const req = mockRequest(null, {});
    const res = mockResponse();
    const next = jest.fn();
    await isAuthenticated(req, res, next);
    expect(res.redirect).toHaveBeenCalledWith("/login");
  });

  test("should call next if a valid token is provided", async () => {
    const token = jwt.sign({ _id: "123" }, process.env.JWT_SECRET);
    const req = mockRequest(null, { cookies: { token } });
    const res = mockResponse();
    const next = jest.fn();
    await isAuthenticated(req, res, next);
    expect(next).toHaveBeenCalled();
  });

  test("should attach user to req if a valid token is provided", async () => {
    const token = jwt.sign({ _id: "123" }, process.env.JWT_SECRET);
    const req = mockRequest(null, { cookies: { token } });
    const res = mockResponse();
    const next = jest.fn();
    await isAuthenticated(req, res, next);
    expect(req.user).toEqual({ id: "123" });
  });
});
