// Test generated by RoostGPT for test ExpressJs using AI Type Open AI and AI Model gpt-4

import request from "supertest";
import express from "express";
import path from "path";
import mongoose from "mongoose";
import cookieParser from "cookie-parser";
import jwt from "jsonwebtoken";
import bcrypt from "bcrypt"; 
import app from "./index"; // assuming index.js exports the express app

describe("POST /login", () => {
  beforeAll(async () => {
    await mongoose.connect("mongodb://localhost/testDatabase", { useNewUrlParser: true, useUnifiedTopology: true });
  });

  afterAll(async () => {
    await mongoose.connection.close();
  });

  test("Should login successfully with correct credentials", async () => {
    const user = new User({
      email: "test@example.com",
      password: bcrypt.hashSync("password", 10)
    });
    await user.save();

    const response = await request(app)
      .post("/login")
      .send({ email: "test@example.com", password: "password" });

    expect(response.headers['set-cookie']).toBeDefined();
    expect(response.status).toBe(302);
    expect(response.headers.location).toBe("/");
  });

  test("Should fail to login with incorrect password", async () => {
    const user = new User({
      email: "test2@example.com",
      password: bcrypt.hashSync("password", 10)
    });
    await user.save();

    const response = await request(app)
      .post("/login")
      .send({ email: "test2@example.com", password: "wrongpassword" });

    expect(response.status).toBe(200);
    expect(response.text).toContain("Incorrect Password");
  });

  test("Should redirect to register if email not found", async () => {
    const response = await request(app)
      .post("/login")
      .send({ email: "notfound@example.com", password: "password" });

    expect(response.status).toBe(302);
    expect(response.headers.location).toBe("/register");
  });
});
