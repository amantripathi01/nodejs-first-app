// Test generated by RoostGPT for test ExpressJs using AI Type Open AI and AI Model gpt-4

import request from 'supertest';
import express from "express";
import path from "path";
import mongoose from "mongoose";
import cookieParser from "cookie-parser";
import jwt from "jsonwebtoken";
import bcrypt from "bcrypt";
import { User } from './models/User';
import { app } from './index';

beforeAll(async () => {
  mongoose.connect('mongodb://localhost/test', { useNewUrlParser: true, useUnifiedTopology: true });
});

afterAll(async () => {
  mongoose.connection.close();
});

describe('POST /login', () => {
  let user;
  beforeAll(async () => {
    const passwordHash = await bcrypt.hash('password', 10);
    user = await User.create({ email: 'test@example.com', password: passwordHash });
  });

  afterAll(async () => {
    await User.deleteMany();
  });

  test('login with correct credentials', async () => {
    const response = await request(app)
      .post('/login')
      .send({ email: 'test@example.com', password: 'password' });
    expect(response.status).toBe(302);
    expect(response.headers.location).toBe('/');
    expect(response.headers['set-cookie']).toBeDefined();
  });

  test('login with incorrect password', async () => {
    const response = await request(app)
      .post('/login')
      .send({ email: 'test@example.com', password: 'wrongpassword' });
    expect(response.status).toBe(200);
    expect(response.text).toContain('Incorrect Password');
  });

  test('login with non-existing user', async () => {
    const response = await request(app)
      .post('/login')
      .send({ email: 'nonexisting@example.com', password: 'password' });
    expect(response.status).toBe(302);
    expect(response.headers.location).toBe('/register');
  });
});
