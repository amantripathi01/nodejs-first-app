// ********RoostGPT********
// Test generated by RoostGPT for test aman12Feb using AI Type Open AI and AI Model gpt-4



// ********RoostGPT********
import request from "supertest";
import express from "express";
import mongoose from "mongoose";
import User from "./User"; // assuming User model is defined in the same directory
import bcrypt from "bcrypt";
import jwt from "jsonwebtoken";
import index from "./index"; // assuming index.js exports the app

jest.mock("mongoose");
jest.mock("bcrypt");
jest.mock("jsonwebtoken");

describe("POST /login", () => {
  let app;

  beforeAll(() => {
    app = express();
    app.use(express.urlencoded({ extended: true }));
    app.use("/", index);
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  it("should return redirect to /register if email does not exist", async () => {
    mongoose.findOne.mockResolvedValue(null);

    const response = await request(app)
      .post("/login")
      .send({ email: "test@test.com", password: "password" });

    expect(response.status).toBe(302);
    expect(response.headers.location).toBe("/register");
  });

  it("should return error message if password is incorrect", async () => {
    const hashedPassword = await bcrypt.hash("password", 10);
    mongoose.findOne.mockResolvedValue({ email: "test@test.com", password: hashedPassword });
    bcrypt.compare.mockResolvedValue(false);

    const response = await request(app)
      .post("/login")
      .send({ email: "test@test.com", password: "wrongpassword" });

    expect(response.status).toBe(200);
    expect(response.text).toContain("Incorrect Password");
  });

  it("should return a token if login is successful", async () => {
    const user = { _id: mongoose.Types.ObjectId(), email: "test@test.com", password: "password" };
    const hashedPassword = await bcrypt.hash(user.password, 10);
    mongoose.findOne.mockResolvedValue({ ...user, password: hashedPassword });
    bcrypt.compare.mockResolvedValue(true);
    jwt.sign.mockReturnValue("token");

    const response = await request(app)
      .post("/login")
      .send({ email: user.email, password: user.password });

    expect(response.status).toBe(302);
    expect(response.headers["set-cookie"]).toEqual(
      expect.arrayContaining([expect.stringMatching(/^token=.*$/)])
    );
    expect(response.headers.location).toBe("/");
  });
});
