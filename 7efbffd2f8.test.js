// ********RoostGPT********
// Test generated by RoostGPT for test aman12Feb using AI Type Open AI and AI Model gpt-4



// ********RoostGPT********
import request from "supertest";
import express from "express";
import mongoose from "mongoose";
import User from "./User"; // assuming User model is defined in User.js
import app from "./index"; // assuming app is exported in index.js

describe("POST /login", () => {
  beforeAll(async () => {
    await mongoose.connect(process.env.MONGO_URL, {
      useNewUrlParser: true,
      useUnifiedTopology: true,
    });
  });

  afterEach(async () => {
    await User.deleteMany();
  });

  afterAll(async () => {
    await mongoose.connection.close();
  });

  test("should login a user with valid credentials", async () => {
    const user = new User({
      email: "test@test.com",
      password: await bcrypt.hash("password", 10),
    });
    await user.save();

    const response = await request(app)
      .post("/login")
      .send({ email: "test@test.com", password: "password" });

    expect(response.status).toBe(302);
    expect(response.headers.location).toBe("/");
    expect(response.cookies.token).toBeDefined();
  });

  test("should fail to login a user with incorrect password", async () => {
    const user = new User({
      email: "test@test.com",
      password: await bcrypt.hash("password", 10),
    });
    await user.save();

    const response = await request(app)
      .post("/login")
      .send({ email: "test@test.com", password: "wrongpassword" });

    expect(response.status).toBe(200);
    expect(response.text).toContain("Incorrect Password");
  });

  test("should fail to login a user with non-existing email", async () => {
    const response = await request(app)
      .post("/login")
      .send({ email: "nonexist@test.com", password: "password" });

    expect(response.status).toBe(302);
    expect(response.headers.location).toBe("/register");
  });
});
